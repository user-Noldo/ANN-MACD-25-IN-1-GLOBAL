//@version=4

MIT License

Copyright (c) 2019 user-Noldo and wro-clai 

(https://www.tradingview.com/u/Noldo )
(https://www.tradingview.com/u/wroclai)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

study("ANN MACD 25 IN 1  " , max_bars_back = 1)
src = close[0]
lights          = input(title="Barcolor I / 0 ? ", options=["ON", "OFF"], defval="OFF")
pref = input(title="Ticker ? ", options=["WTI", "BRENT" , "GOLD" , "SP500" , "EURUSD" , "ETHUSD" , "BTCUSD" , "GBPUSD" , "USDJPY" , 
                                         "USDCHF" , "USDCAD" , "AUDUSD" , "SOYBNUSD" , "CORNUSD" , "NATGASUSD" , "SUGARUSD" , 
                                         "WHEATUSD" , "XPTUSD" , "XU030" , "VIX" , "YM" , "ES" , "GAZP" , "SSE" , "XRPUSD"], defval="EURUSD")

// Definition : INDICATORS

// RSI

_rsi = rsi(close,14)

// MACD

fun_macd(_src,_fastlen,_slowlen,_signallen) =>

    float _output = na 
    _macd   = ema(_src,_fastlen) - ema(_src,_slowlen)
    _signal = ema(_macd , _signallen)
    _output := _macd - _signal


_hist = fun_macd(src,12,26,9)

// MOMENTUM

t_mom = 10


f_mom(_src , _length) =>

    _output = 0.00
    _length_adjusted = _length < 0 ? 0 : _length

    _output := nz((_src / _src[_length_adjusted] ) - 1 ) * 100   


mom = f_mom(src , t_mom)

// BOLLINGER BANDS 

length = 20
mult = 2.0
basis = sma(src, length)
dev = mult * stdev(src, length)
upper = basis + dev
lower = basis - dev


// CM GUPPY EMA 

len1 = 3
len2 = 5
len3 = 8
len4 = 10
len5 = 12
len6 = 15
//Slow EMA
len7 = 30
len8 = 35
len9 = 40
len10 = 45
len11 = 50
len12 = 60


//Fast EMA
ema1 = ema(src, len1)
ema2 = ema(src, len2)
ema3 = ema(src, len3)
ema4 = ema(src, len4)
ema5 = ema(src, len5)
ema6 = ema(src, len6)
//Slow EMA
ema7 = ema(src, len7)
ema8 = ema(src, len8)
ema9 = ema(src, len9)
ema10 = ema(src, len10)
ema11 = ema(src, len11)
ema12 = ema(src, len12)


// DEEP LEARNING INDICATORS

_indicator1 = ((_rsi - _rsi[1] ) / (_rsi[1]))
_indicator2 = ((volume - volume[1] ) / (volume[1]))
_indicator3 = ((_hist - _hist[1] ) / (_hist[1]))
_indicator4 = ((mom - mom[1] ) / (mom[1]))
_indicator5 = ((lower - lower[1] ) / (lower[1]))
_indicator6 = ((basis - basis[1] ) / (basis[1]))
_indicator7 = ((upper - upper[1] ) / (upper[1]))

_indicator8  = ((ema1 - ema1[1] ) / (ema1[1]))
_indicator9  = ((ema2 - ema2[1] ) / (ema2[1]))
_indicator10 = ((ema3 - ema3[1] ) / (ema3[1]))
_indicator11 = ((ema4 - ema4[1] ) / (ema4[1]))
_indicator12 = ((ema5 - ema5[1] ) / (ema5[1]))
_indicator13 = ((ema6 - ema6[1] ) / (ema6[1]))
_indicator14 = ((ema7 - ema7[1] ) / (ema7[1]))
_indicator15 = ((ema8 - ema8[1] ) / (ema8[1]))
_indicator16 = ((ema9 - ema9[1] ) / (ema9[1]))
_indicator17 = ((ema10 - ema10[1] ) / (ema10[1]))
_indicator18 = ((ema11 - ema11[1] ) / (ema11[1]))
_indicator19 = ((ema12 - ema12[1] ) / (ema12[1]))



// Inputs on Tangent Function : 

tangentdiff(_src) => nz((_src - _src[1]) / _src[1] ) 


// Deep Learning Activation Function (Tanh) : 

ActivationFunctionTanh(v) => (1 - exp(-2 * v))/( 1 + exp(-2 * v))


// DEEP LEARNING 

// INPUTS : 

input_1 = tangentdiff(_indicator1)
input_2 = tangentdiff(_indicator2)
input_3 = tangentdiff(_indicator3)
input_4 = tangentdiff(_indicator4)
input_5 = tangentdiff(_indicator5)
input_6 = tangentdiff(_indicator6)
input_7 = tangentdiff(_indicator7)
input_8 = tangentdiff(_indicator8)
input_9 = tangentdiff(_indicator9)
input_10 = tangentdiff(_indicator10)
input_11 = tangentdiff(_indicator11)
input_12 = tangentdiff(_indicator12)
input_13 = tangentdiff(_indicator13)
input_14 = tangentdiff(_indicator14)
input_15 = tangentdiff(_indicator15)
input_16 = tangentdiff(_indicator16)
input_17 = tangentdiff(_indicator17)
input_18 = tangentdiff(_indicator18)
input_19 = tangentdiff(_indicator19)


// LAYERS : 

// Input Layers 

n_0 = ActivationFunctionTanh(input_1 + 0)   
n_1 = ActivationFunctionTanh(input_2 + 0) 
n_2 = ActivationFunctionTanh(input_3 + 0) 
n_3 = ActivationFunctionTanh(input_4 + 0) 
n_4 = ActivationFunctionTanh(input_5 + 0)
n_5 = ActivationFunctionTanh(input_6 + 0)
n_6 = ActivationFunctionTanh(input_7 + 0)
n_7 = ActivationFunctionTanh(input_8 + 0)
n_8 = ActivationFunctionTanh(input_9 + 0)
n_9 = ActivationFunctionTanh(input_10 + 0)
n_10 = ActivationFunctionTanh(input_11 + 0)
n_11 = ActivationFunctionTanh(input_12 + 0)
n_12 = ActivationFunctionTanh(input_13 + 0)
n_13 = ActivationFunctionTanh(input_14 + 0)
n_14 = ActivationFunctionTanh(input_15 + 0)
n_15 = ActivationFunctionTanh(input_16 + 0)
n_16 = ActivationFunctionTanh(input_17 + 0)
n_17 = ActivationFunctionTanh(input_18 + 0)
n_18 = ActivationFunctionTanh(input_19 + 0)

// WTI

fun_wti() =>

    float _output = na

    n_19 = ActivationFunctionTanh(0.000001  * n_0  + 0.000036   * n_1  + 0.000320  * n_2  + 0.000337  * n_3  + 0.000152   * n_4  + -0.000322  * n_5  + 
                                 -0.000046  * n_6  + -0.000063  * n_7  + -0.000109 * n_8  + -0.000207 * n_9  + -0.000267  * n_10 + -0.000301  * n_11 + 
                                 -0.000338  * n_12 + -0.000330  * n_13 + -0.000318 * n_14 + -0.000306 * n_15 + -0.000296  * n_16 + -0.000287  * n_17 + 
                                 -0.000272  * n_18 + -0.053248 ) 

    n_20 = ActivationFunctionTanh(0.000001   * n_0  + 0.000039   * n_1  + 0.000340  * n_2  + 0.000358  * n_3  + 0.000161   * n_4  + -0.000342  * n_5  + 
                                 -0.000049  * n_6  + -0.000066  * n_7  + -0.000116 * n_8  + -0.000220 * n_9  + -0.000284  * n_10 + -0.000320  * n_11 + 
                                 -0.000359  * n_12 + -0.000351  * n_13 + -0.000338 * n_14 + -0.000326 * n_15 + -0.000314  * n_16 + -0.000305  * n_17 + 
                                 -0.000289  * n_18 + 0.070897 ) 

    n_21 =  ActivationFunctionTanh(-0.025379 * n_19 + -0.026997 * n_20 + -0.114167 )
    n_22 =  ActivationFunctionTanh(-0.030372 * n_19 + -0.032308 * n_20 +  0.341862 )
    n_23 =  ActivationFunctionTanh(-0.025309 * n_19 + -0.026922 * n_20 +  -0.119027)
    n_24 =  ActivationFunctionTanh(-0.021185 * n_19 + -0.022536 * n_20 +  -0.382105)
    n_25 =  ActivationFunctionTanh(-0.022434 * n_19 + -0.023864 * n_20 +  -0.305507)
    n_26 =  ActivationFunctionTanh(-0.019948 * n_19 + -0.021219 * n_20 +  -0.456864)

    _output := ActivationFunctionTanh( -0.152697 * n_21 + -0.189377 * n_22 + -0.152306 * n_23 + -0.131409 * n_24 + -0.137415 * n_25 + -0.125632 * n_26 + -0.638464 ) 


// BCOUSD

fun_lco() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-0.000052  * n_0  + 0.000023   * n_1  + -0.000002 * n_2  + 0.000030  * n_3  + 0.000048   * n_4  + -0.000430  * n_5  + 
                                 -0.000184  * n_6  + -0.000083  * n_7  + -0.000118 * n_8  + -0.000184 * n_9  + -0.000230  * n_10 + -0.000273  * n_11 + 
                                 -0.000310  * n_12 + -0.000362  * n_13 + -0.000362 * n_14 + -0.000356 * n_15 + -0.000350  * n_16 + -0.000344  * n_17 + 
                                 -0.000335  * n_18 + -0.053564 ) 


    n_20 = ActivationFunctionTanh(-0.000055  * n_0  + 0.000025   * n_1  + -0.000002 * n_2  + 0.000032  * n_3  + 0.000051   * n_4  + -0.000457  * n_5  + 
                                 -0.000195  * n_6  + -0.000088  * n_7  + -0.000126 * n_8  + -0.000196 * n_9  + -0.000244  * n_10 + -0.000291  * n_11 + 
                                 -0.000329  * n_12 + -0.000385  * n_13 + -0.000385 * n_14 + -0.000378 * n_15 + -0.000372  * n_16 + -0.000366  * n_17 + 
                                 -0.000357  * n_18 + 0.070562 ) 

    n_21 =  ActivationFunctionTanh(-0.020503 * n_19 + -0.021810 * n_20 + -0.104142 )
    n_22 =  ActivationFunctionTanh(-0.024450 * n_19 + -0.026009 * n_20 +  0.354036 )
    n_23 =  ActivationFunctionTanh(-0.020446 * n_19 + -0.021750 * n_20 +  -0.109031)
    n_24 =  ActivationFunctionTanh(-0.017133 * n_19 + -0.018226 * n_20 +  -0.373775)
    n_25 =  ActivationFunctionTanh(-0.018139 * n_19 + -0.019296 * n_20 +  -0.296678)
    n_26 =  ActivationFunctionTanh(-0.016135 * n_19 + -0.017164 * n_20 +  -0.449026)

    _output := ActivationFunctionTanh( -0.188169 * n_21 + -0.233289 * n_22 + -0.187686 * n_23 + -0.161870 * n_24 + -0.169295 * n_25 + -0.154724 * n_26 + -0.711455 ) 


// XAUUSD 

fun_gold() => 

    float _output = na 
    n_19 = ActivationFunctionTanh(52.837840  * n_0 + -34.201225 * n_1  + 38.960812 * n_2  + 5.592289  * n_3  + -22.610776 * n_4  + -70.054901 * n_5  + 
                                 14.423002  * n_6  + 10.120193  * n_7  + -35.155402* n_8  + -51.706552* n_9  + -55.268561 * n_10 + -53.904912 * n_11 + 
                                 -42.977207 * n_12 + 62.802809  * n_13 + 74.169249 * n_14 + 66.839398 * n_15 + 41.936274  * n_16 + 1.102856   * n_17 + 
                                 -108.439737 * n_18+ 39.304512 ) 

    n_20 = ActivationFunctionTanh(-37.832450 * n_0 + 7.123268   * n_1  + 0.789585  * n_2  + 9.995760  * n_3  + -15.981465 * n_4  + 10.373729  * n_5  + 
                                 -24.572326 * n_6  + 82.415254  * n_7  + 2.109146  * n_8  + -67.567661* n_9  + -54.659093 * n_10 + -19.170014 * n_11 + 
                                 41.420784  * n_12 + 101.864341 * n_13 + 63.479857 * n_14 + 21.905533 * n_15 + -14.088866 * n_16 + -43.043595 * n_17 + 
                                 -75.006982 * n_18 + -21.330688 ) 

    n_21 = ActivationFunctionTanh(-59.355328 * n_0  + -6.484519  * n_1  + 38.891522  * n_2  + -40.823312* n_3  + -5.528698  * n_4  + -16.898070 * n_5  + 
                                 -32.390997  * n_6  + 94.051719  * n_7  + 3.776645   * n_8  + -4.608196 * n_9  + -15.414148 * n_10 + -39.996880 * n_11 + 
                                 -88.351133  * n_12 + -127.242725* n_13 + -72.947885 * n_14 + -13.172230* n_15 + 44.610688  * n_16 + 93.223427  * n_17 + 
                                 163.263146  * n_18 + 39.796113 ) 

    n_22 = ActivationFunctionTanh( 29.820835* n_0  + -2.224059  * n_1  + 7.111536  * n_2  + 18.318841 * n_3  + -10.960563 * n_4  + -11.654421 * n_5  + 
                                 -27.770846 * n_6  + -64.906637 * n_7  + 22.706021 * n_8  + 20.318286 * n_9  + 6.730371   * n_10 +  -5.772614 * n_11 + 
                                 -21.275432 * n_12 + -7.441084  * n_13 + 10.866487 * n_14 + 23.714002 * n_15 + 28.647870  * n_16 + 21.613673  * n_17 + 
                                 -25.213859 * n_18 + -14.756525 ) 

    n_23 = ActivationFunctionTanh( 83.107209* n_0  + -3.755753  * n_1  + 28.286978 * n_2  + -2.042898 * n_3  + -42.383024 * n_4  + -0.979595   * n_5  + 
                                 -7.069344  * n_6  + -47.574795 * n_7  + -37.294632* n_8  + -13.705527* n_9  + -3.401552  * n_10 + 1.108021    * n_11 + 
                                 1.443413   * n_12 + -17.482420 * n_13 + -14.019000* n_14 + -2.817824 * n_15 + 15.984599  * n_16 + 39.350090   * n_17 + 
                                 97.108715  * n_18 + -37.766847 ) 

    n_24 =  ActivationFunctionTanh(8.566236 * n_19 + -2.797733 * n_20 + -9.685628 * n_21 + -2.148051 * n_22 + -35.608351 * n_23 + 0.920142)

    _output := ActivationFunctionTanh( 1.771188 * n_24 + -0.811110 ) 
    

// S&P 500 

fun_us500() =>

    float _output = na 
    n_19 = ActivationFunctionTanh(1.713372  * n_0  + -0.104022  * n_1  + -1.430886 * n_2  + 5.123481  * n_3  + 7.828529   * n_4  + -9.222976  * n_5  + 
                                 6.726487   * n_6  + -58.052848 * n_7  + 101.180194* n_8  + 61.831528 * n_9  + -8.571156  * n_10 + -59.984235 * n_11 + 
                                 -94.247120 * n_12 + -33.464019 * n_13 + -12.267299* n_14 + 4.631855  * n_15 + 19.567773  * n_16 + 33.986116  * n_17 + 
                                 63.258514  * n_18 + -3.314938 ) 
                                 
    n_20 = ActivationFunctionTanh( -4.461345* n_0  + -12.398284 * n_1  + -9.722773 * n_2  + -1.217100 * n_3  + 14.538374  * n_4  + 0.367986   * n_5  + 
                                 -12.594648 * n_6  + 6.841388   * n_7  + -22.988002* n_8  + -45.634174* n_9  + -43.934359 * n_10 + -31.940966 * n_11 + 
                                 -6.829405  * n_12 + 48.924994  * n_13 + 40.427275 * n_14 + 29.310079 * n_15 + 19.214930  * n_16 + 11.970764  * n_17 + 
                                 8.245320   * n_18 + 3.067954 ) 

    n_21 =  ActivationFunctionTanh(-22.793045 * n_19 + -41.265378 * n_20 + 21.129869)

    _output := ActivationFunctionTanh( 1.070338 * n_21 + -0.680996 ) 


// EURUSD 

fun_eurusd() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-2.821687 * n_0  + -18.253459 * n_1  + -11.972515* n_2  + 3.377271   * n_3  + 9.921235  * n_4  + 12.380483  * n_5  + 
                                 2.626006   * n_6  + 16.099742  * n_7  + -21.699413* n_8  + -10.901132 * n_9 + 1.884465   * n_10 + 10.029983  * n_11 + 
                                 12.957787  * n_12 + -20.671874 * n_13 + -22.890136* n_14 + -17.969675 * n_15 + -7.107539 * n_16 + 7.852666   * n_17 + 
                                 44.505087  * n_18 + 5.434075 ) 


    n_20 = ActivationFunctionTanh(-3.009306 * n_0  + 11.947944  * n_1  + -5.281219 * n_2  + -4.818918 * n_3  + -1.533984  * n_4  + -1.851733  * n_5  + 
                                 -0.989115  * n_6  + 24.823803  * n_7  + -22.172179* n_8  + -7.865957 * n_9  + 8.656595   * n_10 + 18.648098  * n_11 + 
                                 20.903170  * n_12 + -28.516156 * n_13 + -31.316257* n_14 + -24.265641* n_15 + -9.260898  * n_16 + 11.014631  * n_17 + 
                                 59.453707  * n_18 + 0.633483 ) 

    n_21 = ActivationFunctionTanh( -1.300035 * n_19 + -1.608002 * n_20 + -1.781662 ) 
    n_22 = ActivationFunctionTanh( -5.720013 * n_19 + -5.995730 * n_20 + 0.019366  ) 
    n_23 = ActivationFunctionTanh( -4.036767 * n_19 + -4.010944 * n_20 + -1.367831 ) 
    n_24 = ActivationFunctionTanh( -5.873986 * n_19 + -6.187465 * n_20 + 0.171529  ) 
    n_25 = ActivationFunctionTanh( -1.587828 * n_19 + -1.796462 * n_20 + -1.608132 ) 

    _output := ActivationFunctionTanh( 4.210459 * n_21  + 5.082430 * n_22  + 4.486768 * n_23  + 5.165023 * n_24  + 4.298998 * n_25  + -0.323688 )     


// ETHEREUM 

fun_eth() => 

    float _output = na 

    n_19 = ActivationFunctionTanh(-0.000371  * n_0  + -0.000087  * n_1  + -0.000520 * n_2  + -0.000088  * n_3 + -0.000257  * n_4  + -0.000066  * n_5  + 
                                 -0.000282  * n_6  + -0.000376  * n_7  + -0.000333 * n_8  + -0.000273  * n_9  + -0.000240 * n_10 + -0.000213  * n_11 + 
                                 -0.000182  * n_12 + -0.000100  * n_13 + -0.000084 * n_14 + -0.000070  * n_15 + -0.000058 * n_16 + -0.000046  * n_17 + 
                                 -0.000026  * n_18 + -0.102409 ) 

    n_20 = ActivationFunctionTanh(-0.000330  * n_0  + -0.000078  * n_1  + -0.000463 * n_2  + -0.000078 * n_3  + -0.000229  * n_4  + -0.000058  * n_5  + 
                                 -0.000251  * n_6  + -0.000335  * n_7  + -0.000297 * n_8  + -0.000243 * n_9  + -0.000213  * n_10 + -0.000190  * n_11 + 
                                 -0.000162  * n_12 + -0.000089  * n_13 + -0.000075 * n_14 + -0.000063 * n_15 + -0.000052  * n_16 + -0.000041  * n_17 + 
                                 -0.000024  * n_18 + -0.282129 ) 

    n_21 = ActivationFunctionTanh(-0.000431   * n_0  + -0.000101 * n_1  + -0.000604  * n_2  + -0.000102 * n_3  + -0.000298  * n_4  + -0.000076  * n_5  + 
                                 -0.000328   * n_6  + -0.000436 * n_7  + -0.000387  * n_8  + -0.000316 * n_9  + -0.000278  * n_10 + -0.000248  * n_11 + 
                                 -0.000211   * n_12 + -0.000116 * n_13 + -0.000098  * n_14 + -0.000082 * n_15 + -0.000067  * n_16 + -0.000053  * n_17 + 
                                 -0.000031   * n_18 + 0.228776 ) 

    n_22 = ActivationFunctionTanh(-0.000408 * n_0  + -0.000096 * n_1  + -0.000572 * n_2  + -0.000097 * n_3  + -0.000283  * n_4  + -0.000072  * n_5  + 
                                 -0.000311  * n_6  + -0.000413 * n_7  + -0.000366 * n_8  + -0.000300 * n_9  + -0.000264  * n_10 +  -0.000235 * n_11 + 
                                 -0.000200 * n_12 + -0.000110 * n_13 + -0.000093 * n_14 + -0.000077 * n_15 + -0.000064  * n_16 + -0.000051  * n_17 + 
                                 -0.000029  * n_18 + 0.086748 ) 

    n_23 = ActivationFunctionTanh(-0.000376  * n_0  + -0.000088  * n_1  + -0.000527 * n_2  + -0.000089 * n_3  + -0.000260  * n_4  + -0.000066   * n_5  + 
                                 -0.000286  * n_6  + -0.000381  * n_7  + -0.000337 * n_8  + -0.000276 * n_9  + -0.000243  * n_10 + -0.000216   * n_11 + 
                                 -0.000184  * n_12 + -0.000101  * n_13 + -0.000085 * n_14 + -0.000071 * n_15 + -0.000059  * n_16 + -0.000047   * n_17 + 
                                 -0.000027  * n_18 + -0.078826 ) 

    n_24 = ActivationFunctionTanh(-0.000382  * n_0  + -0.000090  * n_1  + -0.000535 * n_2  + -0.000091 * n_3  + -0.000264  * n_4  + -0.000067  * n_5  + 
                                 -0.000290  * n_6  + -0.000386  * n_7  + -0.000343 * n_8  + -0.000280 * n_9  + -0.000246  * n_10 + -0.000220  * n_11  + 
                                 -0.000187  * n_12 + -0.000103  * n_13 + -0.000087 * n_14 + -0.000072 * n_15 + -0.000059  * n_16 + -0.000047  * n_17 + 
                                 -0.000027  * n_18 + -0.051185 )
                               
    n_25 = ActivationFunctionTanh(-0.000280  * n_0  + -0.000066  * n_1  + -0.000393 * n_2  + -0.000066 * n_3  + -0.000194  * n_4  + -0.000050  * n_5  + 
                                 -0.000213  * n_6  + -0.000284  * n_7  + -0.000251 * n_8  + -0.000206 * n_9  + -0.000181  * n_10 + -0.000161  * n_11 + 
                                 -0.000137  * n_12 + -0.000075  * n_13 + -0.000064 * n_14 + -0.000053 * n_15 + -0.000044  * n_16 + -0.000035  * n_17 + 
                                 -0.000020  * n_18 + -0.492262 ) 

    n_26 = ActivationFunctionTanh(-0.000327  * n_0  + -0.000077  * n_1  + -0.000459 * n_2  + -0.000078 * n_3  + -0.000227  * n_4  + -0.000058  * n_5  + 
                                 -0.000249  * n_6  + -0.000331  * n_7  + -0.000294 * n_8  + -0.000240 * n_9  + -0.000211  * n_10 + -0.000188  * n_11 + 
                                 -0.000161  * n_12 + -0.000088  * n_13 + -0.000074 * n_14 + -0.000062 * n_15 + -0.000051  * n_16 + -0.000041  * n_17 + 
                                 -0.000023  * n_18 + -0.295522 ) 

    n_27 = ActivationFunctionTanh(-0.029854 * n_19 + -0.027057 * n_20 + -0.035049 * n_21 +  -0.032827 * n_22 + -0.030224 * n_23 + 
                                 -0.030658 * n_24 + -0.023880 * n_25 + -0.026851 * n_26 + -0.463146) 

    _output := ActivationFunctionTanh( 0.416702 * n_27 + 0.796033 ) 


// BITCOIN 

fun_btc() => 

    float _output = na 
    
    n_19 = ActivationFunctionTanh(5.622290  * n_0  + 2.499701   * n_1  + 5.197286  * n_2  + 7.469000  * n_3  + -20.664013 * n_4  + -37.000192 * n_5  + 
                                 -19.936922 * n_6  + -18.169497 * n_7  + 12.695087 * n_8  + 17.298004 * n_9  + 12.372139  * n_10 + 7.707592   * n_11 + 
                                 2.628686   * n_12 + -6.574450  * n_13 + -8.316012 * n_14 + -9.451140 * n_15 + -10.462814 * n_16 + -12.071157 * n_17 + 
                                 -14.065401 * n_18 + -1.891678 ) 


    n_20 = ActivationFunctionTanh(-18.082028* n_0  + -7.061845  * n_1  + -1.809548 * n_2  + -9.565561 * n_3  + 4.639371   * n_4  + 21.068488  * n_5  + 
                                 8.075246   * n_6  + -21.787421 * n_7  + -5.896261 * n_8  + 5.951431  * n_9  + 10.551094  * n_10 + 11.933258  * n_11 + 
                                 11.008272  * n_12 + 0.087309   * n_13 + -1.780242 * n_14 + -4.751057 * n_15 + -6.493337  * n_16 + -9.716132  * n_17 + 
                                 -16.456490 * n_18 + -3.528653 ) 


    n_21 = ActivationFunctionTanh(-2.568836 * n_0  + -2.813368 * n_1  + -4.675823  * n_2  + -19.228176* n_3  + 19.847874  * n_4  + -8.308847  * n_5  + 
                                 2.837159   * n_6  + 17.689905 * n_7  + -24.091551 * n_8  + -36.516231* n_9  + -18.004530 * n_10 + 7.444323   * n_11 + 
                                 42.523649  * n_12 + 43.808221 * n_13 + 15.279483  * n_14 + -7.814351 * n_15 + -19.973689 * n_16 + -21.028223 * n_17 + 
                                 10.309032  * n_18 + 2.125430 ) 

    n_22 = ActivationFunctionTanh(-5.435545* n_0  + -61.872336 * n_1  + 4.656299  * n_2  + 1.327263  * n_3  + -6.791509  * n_4  + -15.409155 * n_5  + 
                                 -15.551302* n_6  + -18.093633 * n_7  + -7.950241 * n_8  + 1.897437  * n_9  + 2.605939   * n_10 +  3.282226  * n_11 + 
                                 3.257898  * n_12 + 10.385999  * n_13 + 11.599459 * n_14 + 10.347325 * n_15 + 8.129500   * n_16 + 3.642972   * n_17 + 
                                 -10.413314* n_18 + 3.723388 ) 

    n_23 = ActivationFunctionTanh(4.759455  * n_0  + 9.049628   * n_1  + -18.400763* n_2  + 24.658356 * n_3  + 10.596147  * n_4  + -39.533696  * n_5  + 
                                 5.694088   * n_6  + -17.550614 * n_7  + 20.558810 * n_8  + 27.280596 * n_9  + 13.905847  * n_10 + -3.563441   * n_11 + 
                                 -25.672768 * n_12 + -17.601677 * n_13 + -0.138152 * n_14 + 12.718021 * n_15 + 18.925993  * n_16 + 15.546176   * n_17 + 
                                 -15.613543 * n_18 + -15.704991 )
                               
    n_24 = ActivationFunctionTanh(-14.600687* n_0  + -10.589612 * n_1  + -8.471602 * n_2  + 1.556096  * n_3  + -9.733228  * n_4  + 8.036806   * n_5  + 
                                 -0.309118  * n_6  + -2.912532  * n_7  + -0.493919 * n_8  + 4.471805  * n_9  + 1.980418   * n_10 + -2.807843  * n_11 + 
                                 -10.556087 * n_12 + -5.287931  * n_13 + 1.896765  * n_14 + 6.553680  * n_15 + 6.359608   * n_16 + 2.798370   * n_17 + 
                                 -14.699859 * n_18 + 13.686196 ) 

    n_25 = ActivationFunctionTanh(-5.049515 * n_0  + -1.440806  * n_1  + 2.415727  * n_2  + -12.916170* n_3  + 0.604438   * n_4  + -0.764265  * n_5  + 
                                 -14.157954 * n_6  + 9.691607   * n_7  + 9.051838  * n_8  + -0.804892 * n_9  + -17.397169 * n_10 + -31.383806 * n_11 + 
                                 -40.733039 * n_12 + 39.153023  * n_13 + 57.724642 * n_14 + 58.139707 * n_15 + 38.644523  * n_16 + -0.160401  * n_17 + 
                                 -122.189073* n_18 + 13.329295 ) 

    n_26 = ActivationFunctionTanh(-7.030964 * n_0  + -2.488614  * n_1  + 16.749366 * n_2  + -3.469283 * n_3  + 5.244533   * n_4  + 7.830573   * n_5  + 
                                 13.439971  * n_6  + -2.232780  * n_7  + 26.604969 * n_8  + 11.311765 * n_9  + -6.960309  * n_10 + -22.712233 * n_11 + 
                                 -37.478393 * n_12 + -22.396917 * n_13 + -10.265932* n_14 + 1.645668  * n_15 + 9.399800   * n_16 + 15.574956  * n_17 + 
                                 19.070072  * n_18 + -13.493085 ) 

    n_27 = ActivationFunctionTanh(-12.743297* n_0  + 6.457645   * n_1  + 4.861898  * n_2  + -19.105932* n_3  + 9.341703   * n_4  + 21.500877  * n_5  + 
                                 -8.293664  * n_6  + 22.017982  * n_7  + -19.742593* n_8  + -13.086873* n_9  + 0.959429   * n_10 + 12.901602  * n_11 + 
                                 25.132714  * n_12 + 12.294804  * n_13 + 1.094712  * n_14 + -8.432408 * n_15 + -17.186863 * n_16 + -24.167906 * n_17 + 
                                 -35.804322 * n_18 + -0.204549 ) 

    n_28 = ActivationFunctionTanh(16.891428 * n_0  + -2.787339  * n_1  + -7.534669 * n_2  + -19.668218* n_3  + 38.156107  * n_4  + 1.956931   * n_5  + 
                                 33.758295  * n_6  + -34.949395 * n_7  + 8.376258  * n_8  + 13.345830 * n_9  + -2.088531  * n_10 + -17.347272 * n_11 + 
                                 -32.046382 * n_12 + 26.040647  * n_13 + 43.895204 * n_14 + 45.766937 * n_15 + 31.113101  * n_16 + -0.502976  * n_17 + 
                                 -106.710272* n_18 + -19.036154 ) 
 
    _output := ActivationFunctionTanh(16.540895* n_19  + 1.494964  * n_20  + -1.990753 * n_21  + 15.858690* n_22  + 1.158246 * n_23  + 0.826219 * n_24  + 
                                     1.730548  * n_25  + 10.318386 * n_26  + 21.552672 * n_27  + 1.314849 * n_28  + -1.342748 ) 


fun_gbpusd()=>
    float _output = na 
    
    n_19 = ActivationFunctionTanh(5.490056  * n_0  + 3.266553   * n_1  +  6.628037 * n_2  + -4.063659 * n_3  + 1.365761   * n_4  + -3.649450  * n_5  + 
                                 -2.217679  * n_6  + -11.531407 * n_7  + -18.323920* n_8  + 4.860349  * n_9  + 13.905490  * n_10 + 18.196506  * n_11 + 
                                 19.167197  * n_12 + 2.174698   * n_13 + -2.022533 * n_14 + -4.723892 * n_15 + -6.260803  * n_16 + -7.023201  * n_17 + 
                                 -7.334673  * n_18 + -7.699009 ) 


    n_20 = ActivationFunctionTanh(0.610527  * n_0  + 2.387634   * n_1  + -2.579164 * n_2  + 0.635190  * n_3  + -0.748598  * n_4  + 0.261155   * n_5  + 
                                 0.990994   * n_6  + 0.098266   * n_7  + 0.285893  * n_8  + 0.206367  * n_9  + 0.093035   * n_10 + 0.002745   * n_11 + 
                                 -0.090800  * n_12 + -0.451834  * n_13 + -0.610150 * n_14 + -0.777932 * n_15 + -0.944502  * n_16 + -1.101115  * n_17 + 
                                 -1.314165  * n_18 + -0.758905 ) 


    n_21 = ActivationFunctionTanh(2.427379  * n_0  + 1.436014  * n_1  + -1.359984  * n_2  + -2.069490 * n_3  + 8.982770   * n_4  + -0.659576  * n_5  + 
                                 -10.026540 * n_6  + -1.969780 * n_7  + 1.915268   * n_8  + 2.897072  * n_9  + 2.506442   * n_10 + 1.689407   * n_11 + 
                                 0.121341   * n_12 + -5.107045 * n_13 + -5.242894  * n_14 + -4.789386 * n_15 + -3.919444  * n_16 + -2.778950  * n_17 + 
                                 -0.119142  * n_18 + 1.555153 ) 

    n_22 = ActivationFunctionTanh( 2.433826* n_0  + -3.678357  * n_1  + 1.550180  * n_2  + 6.179265  * n_3  + -1.108968  * n_4  + -8.377588  * n_5  + 
                                 -7.862757 * n_6  + -5.861496  * n_7  + -2.634604 * n_8  + 4.503027  * n_9  + 6.745001   * n_10 +  7.965806  * n_11 + 
                                 8.794730  * n_12 + 5.646551   * n_13 + 2.961227  * n_14 + -0.193958 * n_15 + -3.678197  * n_16 + -7.387106  * n_17 + 
                                 -14.665862* n_18 + -6.063243 ) 

    n_23 = ActivationFunctionTanh(4.680122  * n_0  + -2.732691  * n_1  + -13.313694* n_2  + 1.908172  * n_3  + 10.362903  * n_4  + 3.291198    * n_5  + 
                                 -3.927998  * n_6  + -8.860103  * n_7  + -6.399484 * n_8  + -1.106320 * n_9  + 1.542245   * n_10 + 3.443490    * n_11 + 
                                 5.182450   * n_12 + 3.068917   * n_13 + 0.418373  * n_14 + -2.563035 * n_15 + -5.658416  * n_16 + -8.714676   * n_17 + 
                                 -13.825513 * n_18 + 5.617290 )
                               
    n_24 = ActivationFunctionTanh(-0.398863 * n_0  + -0.631521  * n_1  + -3.617040 * n_2  + 0.275996  * n_3  + 0.138940   * n_4  + 0.768288   * n_5  + 
                                 -0.176526  * n_6  + -1.738363  * n_7  + -0.853075 * n_8  + 0.027222  * n_9  + 0.283157   * n_10 + 0.400355   * n_11 + 
                                 0.415713   * n_12 + -0.504937  * n_13 + -0.901893 * n_14 + -1.288526 * n_15 + -1.652957  * n_16 + -1.988544  * n_17 + 
                                 -2.473421  * n_18 + -1.824157 ) 

    n_25 = ActivationFunctionTanh(-0.434606 * n_0  + -0.912561  * n_1  + -3.982022 * n_2  + 0.194764  * n_3  + 0.117094   * n_4  + 0.717983   * n_5  + 
                                 -0.259875  * n_6  + -1.958506  * n_7  + -0.975657 * n_8  + 0.010676  * n_9  + 0.298968   * n_10 + 0.430837   * n_11 + 
                                 0.447982   * n_12 + -0.579643  * n_13 + -1.020234 * n_14 + -1.448366 * n_15 + -1.851085  * n_16 + -2.221242  * n_17 + 
                                 -2.753580  * n_18 + -1.945948 ) 

    n_26 = ActivationFunctionTanh(5.304683  * n_0  + 1.506396   * n_1  + 4.884027  * n_2  + 0.565123  * n_3  + 7.484281   * n_4  + -1.865905  * n_5  + 
                                 1.522779   * n_6  + 1.598280   * n_7  + 4.762099  * n_8  + -5.119610 * n_9  + -8.876096  * n_10 + -9.131305  * n_11 + 
                                 -5.546640  * n_12 + 12.940456  * n_13 + 12.486562 * n_14 + 9.206098  * n_15 + 3.798855   * n_16 + -3.111652  * n_17 + 
                                 -18.792277 * n_18 + -9.874367 ) 


    _output := ActivationFunctionTanh(9.286773  * n_19  + 1.984587  * n_20  + -4.301861 * n_21  + 6.872700 * n_22  + 10.748752 * n_23  + 1.250036 * n_24  + 
                                      1.315097  * n_25  + 2.053666  * n_26  + -0.955411 ) 



fun_usdjpy()=>
    float _output = na 
    
    n_19 = ActivationFunctionTanh(-0.003209 * n_0  + 0.030624   * n_1  +  0.012230 * n_2  + -0.016452 * n_3  + -0.039030  * n_4  + -0.135990  * n_5  + 
                                 -0.063271  * n_6  + -0.050554  * n_7  + -0.079001 * n_8  + -0.105439 * n_9  + -0.116272  * n_10 + -0.124512  * n_11 + 
                                 -0.132199  * n_12 + -0.151116  * n_13 + -0.155539 * n_14 + -0.155825 * n_15 + -0.154755  * n_16 + -0.153347  * n_17 + 
                                 -0.149961  * n_18 + -0.477694 ) 


    n_20 = ActivationFunctionTanh(-0.003453 * n_0  + 0.029988   * n_1  + 0.011905  * n_2  + -0.016601 * n_3  + -0.038819  * n_4  + -0.134337  * n_5  + 
                                 -0.062712  * n_6  + -0.050254  * n_7  + -0.078302 * n_8  + -0.104339 * n_9  + -0.115000  * n_10 + -0.123107  * n_11 + 
                                 -0.130671  * n_12 + -0.149299  * n_13 + -0.153659 * n_14 + -0.153933 * n_15 + -0.152873  * n_16 + -0.151480  * n_17 + 
                                 -0.148138  * n_18 + -0.494169 ) 


    _output := ActivationFunctionTanh(0.507906  * n_19  + 0.501678  * n_20  + 0.395257 )  
                                       

fun_usdchf()=>
    float _output = na 
    
    n_19 = ActivationFunctionTanh(-26.513564* n_0  + -5.557942  * n_1  +  4.168634 * n_2  + -8.077135 * n_3  + -4.237111  * n_4  + -7.606100  * n_5  + 
                                 -8.559652  * n_6  + 18.775952  * n_7  + 24.616273 * n_8  + 10.297537 * n_9  + -1.155323  * n_10 + -11.161412 * n_11 + 
                                 -21.926169 * n_12 + -18.588633 * n_13 + -9.789406 * n_14 + -0.564007 * n_15 + 8.477103   * n_16 + 17.242126  * n_17 + 
                                 33.941982  * n_18 + -9.674050 ) 


    n_20 = ActivationFunctionTanh(-0.054114 * n_0  + 0.706664   * n_1  + -2.118530 * n_2  + 1.356592  * n_3  + 0.650782   * n_4  + 0.464785   * n_5  + 
                                 2.528653   * n_6  + 20.176802  * n_7  + -35.539400* n_8  + -28.579003* n_9  + 5.177515   * n_10 + 34.118062  * n_11 + 
                                 54.565611  * n_12 + -31.921018 * n_13 + -49.233322* n_14 + -47.511410* n_15 + -28.669751 * n_16 + 4.683752   * n_17 + 
                                 104.225084 * n_18 + -0.759986 ) 


    n_21 = ActivationFunctionTanh(-18.397847  * n_19  + -9.338896  * n_20  + 5.725737  )  
                                       
    _output := ActivationFunctionTanh(1.075762  * n_21  + -0.181002 )  


fun_usdcad()=>
    float _output = na 
    
    n_19 = ActivationFunctionTanh(-51.703450* n_0  + -45.004441 * n_1  +-10.690010  * n_2  + 39.962689  * n_3  + 113.408088 * n_4  + 25.242037  * n_5  + 
                                 -61.131863 * n_6  + -28.720072 * n_7  + -187.902960* n_8  + -234.448859* n_9  + -88.321465 * n_10 + 82.841014  * n_11 + 
                                 287.040357 * n_12 + 289.234795 * n_13 + 147.197476 * n_14 + 8.030199   * n_15 + -105.881170* n_16 + -176.032738* n_17 + 
                                 -155.977726* n_18 + 47.570130 ) 


    n_20 = ActivationFunctionTanh(-33.702167* n_0  + -2.755310  * n_1  + 12.826639 * n_2  + 16.058758 * n_3  + -159.566755* n_4  + -27.144504 * n_5  + 
                                 -101.093754* n_6  + 250.251021 * n_7  + 267.474543* n_8  + 57.404063 * n_9  + -116.539265* n_10 + -223.491445* n_11 + 
                                 -262.644509* n_12 + 81.374447  * n_13 + 123.229647* n_14 + 115.900670* n_15 + 66.956728  * n_16 + -13.126479 * n_17 + 
                                 -200.529873* n_18 + 70.852444 ) 

    
    _output := ActivationFunctionTanh(0.567324  * n_19  + 0.620997 * n_20 + 0.226484) 


fun_audusd()=>
    float _output = na 
    
    n_19 = ActivationFunctionTanh(-4.420313 * n_0  + -5.502168  * n_1  +  -53.830646* n_2  + -71.134632* n_3  + -7.517888  * n_4  + -33.091832 * n_5  + 
                                 8.051220   * n_6  + -108.605811* n_7  + -25.463410 * n_8  + 110.224488* n_9  + 130.165065 * n_10 + 109.316525 * n_11 + 
                                 46.419414  * n_12 + -106.066454* n_13 + -89.903708 * n_14 + -64.981237* n_15 + -39.277407 * n_16 + -17.053201 * n_17 + 
                                 15.881778  * n_18 + 34.837154  ) 


    n_20 = ActivationFunctionTanh(9.677326  * n_0  + -20.788637 * n_1  + -0.858700 * n_2  + -21.394081* n_3  + 20.336813  * n_4  + 5.090148   * n_5  + 
                                 -20.638873 * n_6  + -14.220457 * n_7  + -17.522790* n_8  + -12.664216* n_9  + -9.169027  * n_10 + -7.129225  * n_11 + 
                                 -5.092969  * n_12 + 0.416532   * n_13 + 1.856525  * n_14 + 2.028972  * n_15 + 3.741542   * n_16 + 4.527303   * n_17 + 
                                 7.649631   * n_18 + 2.517925) 


    n_21 = ActivationFunctionTanh(19.312498 * n_0  + 13.804280 * n_1  + -31.049726 * n_2  + -35.186394* n_3  + 0.147099   * n_4  + 54.995918  * n_5  + 
                                 22.929863  * n_6  + -99.954175* n_7  + 112.713718 * n_8  + 67.768175 * n_9  + 11.527203  * n_10 + -34.608716 * n_11 + 
                                 -75.591348 * n_12 + -44.213708* n_13 + -28.459221 * n_14 + -15.388203* n_15 + -2.281618  * n_16 + 11.263065  * n_17 + 
                                 48.029826  * n_18 + -2.492508 ) 

    n_22 = ActivationFunctionTanh( 186.104419 * n_0  + 102.801149 * n_1  + 19.124904 * n_2  + 44.010230 * n_3  + 115.004941 * n_4  + 114.009051  * n_5  + 
                                 2.489816     * n_6  + -72.220365 * n_7  + -23.132300* n_8  + -57.502147* n_9  + -89.497097 * n_10 +  -100.172108* n_11 + 
                                 -83.501184   * n_12 + 46.203636  * n_13 + 28.075483 * n_14 + -7.919755 * n_15 + -47.653316 * n_16 + -83.074739  * n_17 + 
                                 -117.697198  * n_18 + 22.668560 ) 

    n_23 = ActivationFunctionTanh(138.725239* n_0  + -0.453740  * n_1  + 2.219755   * n_2  + -78.509313* n_3  + -10.480433 * n_4  + -6.099699   * n_5  + 
                                 2.531453   * n_6  + -143.739008* n_7  + -262.609921* n_8  + 154.626340* n_9  + 191.584451 * n_10 + 112.650605  * n_11 + 
                                 -57.556555 * n_12 + -82.701061 * n_13 + 26.364888  * n_14 + 89.023946 * n_15 + 89.908536  * n_16 + 26.544901   * n_17 + 
                                 259.694801 * n_18 + -1.600960 )

    _output :=  ActivationFunctionTanh(1.242626 * n_19 + 6.902969 * n_20 + -51.690127 * n_21 + 1.150135 * n_22 + 1.133833 * n_23 + 0.004036)


fun_soybnusd()=>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-7.065621 * n_0  + 1.320790   * n_1  +  -13.450447* n_2  + 2.992029  * n_3  + 2.402978   * n_4  + 14.576491  * n_5  + 
                                 -8.367621  * n_6  + 22.204745  * n_7  + -14.990001 * n_8  + -22.185432* n_9  + -9.503618  * n_10 + 7.347228   * n_11 + 
                                 30.595514  * n_12 + 39.972175  * n_13 + 22.596606  * n_14 + 4.517121  * n_15 + -12.061643 * n_16 + -26.235254 * n_17 + 
                                 -46.664752 * n_18 + 4.148923  ) 


    n_20 = ActivationFunctionTanh(-0.659944 * n_0  + -2.404896  * n_1  + -6.099786 * n_2  + -0.183864 * n_3  + -8.433338  * n_4  + -7.220553  * n_5  + 
                                 2.919138   * n_6  + 11.248354  * n_7  + 1.834366  * n_8  + -1.704214 * n_9  + 1.124610   * n_10 + 4.406613   * n_11 + 
                                 7.280499   * n_12 + -9.089605  * n_13 + -13.239083* n_14 + -13.104681* n_15 + -8.589893  * n_16 + -0.180630  * n_17 + 
                                 24.829264  * n_18 + -0.934134) 

    _output :=  ActivationFunctionTanh(1.478310 * n_19 + 3.186951 * n_20 + -0.250738)     


fun_cornusd()=>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-0.016480 * n_0  + -0.003449  * n_1  +  -0.009839* n_2  + -0.031470 * n_3  + -0.010901  * n_4  + -0.032681  * n_5  + 
                                 -0.029864  * n_6  + -0.022547  * n_7  + -0.025478 * n_8  + -0.028572 * n_9  + -0.030011  * n_10 + -0.031111  * n_11 + 
                                 -0.032309  * n_12 + -0.034745  * n_13 + -0.034393 * n_14 + -0.034044 * n_15 + -0.033747  * n_16 + -0.033490  * n_17 + 
                                 -0.033072  * n_18 + 0.388420 ) 


    n_20 = ActivationFunctionTanh(-0.010544 * n_0  + -0.002245  * n_1  + -0.006275 * n_2  + -0.020089 * n_3  + -0.006941  * n_4  + -0.020909  * n_5  + 
                                 -0.019098  * n_6  + -0.014429  * n_7  + -0.016301 * n_8  + -0.018274 * n_9  + -0.019190  * n_10 + -0.019889  * n_11 + 
                                 -0.020649  * n_12 + -0.022158  * n_13 + -0.021921 * n_14 + -0.021686 * n_15 + -0.021486  * n_16 + -0.021313  * n_17 + 
                                 -0.021029  * n_18 + -0.410177 ) 


    n_21 = ActivationFunctionTanh(-0.015460 * n_0  + -0.003252 * n_1  + -0.009225  * n_2  + -0.029504 * n_3  + -0.010209  * n_4  + -0.030689  * n_5  + 
                                 -0.028031  * n_6  + -0.021177 * n_7  + -0.023941  * n_8  + -0.026859 * n_9  + -0.028215  * n_10 + -0.029252  * n_11 + 
                                 -0.030381  * n_12 + -0.032630 * n_13 + -0.032290  * n_14 + -0.031953 * n_15 + -0.031667  * n_16 + -0.031419  * n_17 + 
                                 -0.031015  * n_18 + 0.211788 ) 

    n_22 = ActivationFunctionTanh(-0.014438* n_0  + -0.003049  * n_1  + -0.008610 * n_2  + -0.027541 * n_3  + -0.009523  * n_4  + -0.028672  * n_5  + 
                                 -0.026182 * n_6  + -0.019787  * n_7  + -0.022374 * n_8  + -0.025104 * n_9  + -0.026372  * n_10 + -0.027341  * n_11 + 
                                 -0.028396 * n_12 + -0.030476  * n_13 + -0.030153 * n_14 + -0.029834 * n_15 + -0.029562  * n_16 + -0.029326  * n_17 + 
                                 -0.028942 * n_18 + 0.065092 ) 

    n_23 = ActivationFunctionTanh(-0.011827 * n_0  + -0.002513  * n_1  + -0.007043 * n_2  + -0.022540 * n_3  + -0.007788  * n_4  + -0.023473   * n_5  + 
                                 -0.021435  * n_6  + -0.016200  * n_7  + -0.018311 * n_8  + -0.020536 * n_9  + -0.021570  * n_10 + -0.022359   * n_11 + 
                                 -0.023217  * n_12 + -0.024907  * n_13 + -0.024638 * n_14 + -0.024374 * n_15 + -0.024149  * n_16 + -0.023953   * n_17 + 
                                 -0.023634  * n_18 + -0.259428 )
                               
    n_24 = ActivationFunctionTanh(-0.015009 * n_0  + -0.003163  * n_1  + -0.008953 * n_2  + -0.028636 * n_3  + -0.009906  * n_4  + -0.029800  * n_5  + 
                                 -0.027215  * n_6  + -0.020564  * n_7  + -0.023251 * n_8  + -0.026087 * n_9  + -0.027405  * n_10 + -0.028412  * n_11 + 
                                 -0.029509  * n_12 + -0.031682  * n_13 + -0.031348 * n_14 + -0.031019 * n_15 + -0.030738  * n_16 + -0.030496  * n_17 + 
                                 -0.030100  * n_18 + 0.144537 ) 

    n_25 = ActivationFunctionTanh(-0.013048 * n_0  + -0.002766  * n_1  + -0.007776 * n_2  + -0.024877 * n_3  + -0.008597  * n_4  + -0.025910  * n_5  + 
                                 -0.023658  * n_6  + -0.017882  * n_7  + -0.020218 * n_8  + -0.022682 * n_9  + -0.023827  * n_10 + -0.024701  * n_11 + 
                                 -0.025652  * n_12 + -0.027519  * n_13 + -0.027223 * n_14 + -0.026932 * n_15 + -0.026684  * n_16 + -0.026469  * n_17 + 
                                 -0.026117  * n_18 +  -0.112790 )     

    _output := ActivationFunctionTanh(0.074457  * n_19  + 0.048925  * n_20  + 0.069579 * n_21  + 0.065052 * n_22  + 0.054124 * n_23  + 0.067549 * n_24  + 
                                      0.059160  * n_25  + -0.314764 )


fun_natgasusd() => 

    float _output = na 
    
    n_19 = ActivationFunctionTanh(1.098380  * n_0  + 2.037200   * n_1  + 2.656886  * n_2  + 0.225693  * n_3  + -5.909073  * n_4  + 10.162877  * n_5  + 
                                 -3.816904  * n_6  + 1.548679   * n_7  + 18.079835 * n_8  + 12.667222 * n_9  + -3.288353  * n_10 + -20.610741 * n_11 + 
                                 -39.671225 * n_12 + 0.975984   * n_13 + 18.910647 * n_14 + 26.226873 * n_15 + 22.080573  * n_16 + 7.239010   * n_17 + 
                                 -48.558268 * n_18 + -11.006730 ) 


    n_20 = ActivationFunctionTanh(-0.614121 * n_0  + -1.290751  * n_1  + 12.099744 * n_2  + -2.402190 * n_3  + -7.080400  * n_4  + 4.639995   * n_5  + 
                                 -7.397944  * n_6  + 7.338716   * n_7  + -11.681407* n_8  + 6.258824  * n_9  +  8.101016  * n_10 + 1.235510   * n_11 + 
                                 -14.217004 * n_12 + -5.261864  * n_13 + 8.829398  * n_14 + 16.184357 * n_15 + 15.062650  * n_16 + 5.544119   * n_17 + 
                                 -34.640015 * n_18 + -8.857927 ) 


    n_21 = ActivationFunctionTanh(0.411553  * n_0  + 3.872694  * n_1  + 2.281955  * n_2  +-30.423847 * n_3  + 15.872479 * n_4  + 4.447794   * n_5  + 
                                 -18.021414 * n_6  + -0.783600 * n_7  + 1.985845  * n_8  + 4.547403  * n_9  + 5.781304  * n_10 + 6.801802   * n_11 + 
                                 7.951994   * n_12 + 5.603189  * n_13 + 2.830983  * n_14 +-0.508047  * n_15 + -4.240757 * n_16 + -8.227378  * n_17 + 
                                 -16.508394 * n_18 + -8.758558 ) 

    n_22 = ActivationFunctionTanh(-1.646526* n_0  + -0.203317  * n_1  + -0.613232 * n_2  + 2.202959  * n_3  + -8.378094  * n_4  + 7.387958   * n_5  + 
                                 -9.713048 * n_6  + -9.080734  * n_7  + -2.432329 * n_8  + 30.187228 * n_9  + 19.851900  * n_10 +  -6.313229 * n_11 + 
                                 -48.698740* n_12 + -20.573013 * n_13 + 13.979364 * n_14 + 33.533159 * n_15 + 34.622697  * n_16 + 17.534076  * n_17 + 
                                 -62.564069* n_18 + 1.081573 ) 

    n_23 = ActivationFunctionTanh(-12.515173* n_0  + 18.015917  * n_1  + -0.656524 * n_2  + 0.058974  * n_3  + -8.253537  * n_4  + -4.033528   * n_5  + 
                                 -0.778278  * n_6  + -11.908440 * n_7  + -9.562002 * n_8  + 3.068642  * n_9  + 9.398602   * n_10 + 13.340170   * n_11 + 
                                 15.675999  * n_12 + 4.303757   * n_13 + 0.683065  * n_14 + -1.897408 * n_15 + -3.610371  * n_16 + -4.682041   * n_17 + 
                                 -5.693068  * n_18 + -7.700922 )
                               
    n_24 = ActivationFunctionTanh(0.449717  * n_0  + -1.121706  * n_1  + 0.469389  * n_2  + -1.615492 * n_3  + -4.635358  * n_4  + 2.831031   * n_5  + 
                                 -5.022213  * n_6  + 3.439405   * n_7  + -11.237813* n_8  + 7.446712  * n_9  + 8.541435   * n_10 + 1.025497   * n_11 + 
                                 -14.968160 * n_12 + -6.692264  * n_13 + 7.432723  * n_14 + 15.195864 * n_15 + 14.862277  * n_16 + 6.441711   * n_17 + 
                                 -31.006975 * n_18 + 1.397350 ) 

    n_25 = ActivationFunctionTanh(1.877358  * n_0  + -1.202669  * n_1  + 5.198265  * n_2  + 2.578363  * n_3  + -1.940008  * n_4  + 7.620980   * n_5  + 
                                 -2.696906  * n_6  + -0.762448  * n_7  + -7.612328 * n_8  + 2.371828  * n_9  + 3.944832   * n_10 + 0.106017   * n_11 + 
                                 -8.690399  * n_12 + 4.475534   * n_13 + 12.667908 * n_14 + 14.398164 * n_15 + 8.972717   * n_16 + -3.071549  * n_17 + 
                                 -42.694189 * n_18 + -7.910758 ) 

    n_26 = ActivationFunctionTanh(0.095820  * n_0  + -2.799038  * n_1  + -1.525275 * n_2  + 15.251015 * n_3  + -14.895370 * n_4  + -24.045478 * n_5  + 
                                 -10.750087 * n_6  + -14.694556 * n_7  + -9.326560 * n_8  + 4.222591  * n_9  + 7.081939   * n_10 + 6.379681   * n_11 + 
                                 2.559446   * n_12 + -3.141312  * n_13 + -0.212631 * n_14 + 3.076919  * n_15 + 6.194130   * n_16 + 8.900922   * n_17 + 
                                 12.799168  * n_18 + 0.687029 ) 

    _output := ActivationFunctionTanh(10.756274 * n_19  + 2.323006   * n_20  + 10.862193 * n_21  + 4.121935 * n_22  + 13.067959 * n_23  + 1.692999 * n_24  + 
                                     6.087509   * n_25  + 6.751885   * n_26  + -0.678339 )


fun_sugarusd() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(1.405907  * n_0  + 0.034496   * n_1  + -2.233138 * n_2  + -3.143744 * n_3  + -2.859623  * n_4  + 5.829204   * n_5  + 
                                 -3.481982  * n_6  + 1.543715   * n_7  + -27.213161* n_8  + -7.361566 * n_9  + 13.618383  * n_10 + 26.856798  * n_11 + 
                                 30.888637  * n_12 + -30.143806 * n_13 + -36.877682* n_14 + -31.645898* n_15 + -16.477500 * n_16 + 5.893878   * n_17 + 
                                 67.824634  * n_18 + -0.318286 ) 


    n_20 = ActivationFunctionTanh(-21.333263* n_0  + -9.181198  * n_1  + -0.410912 * n_2  + 3.171495  * n_3  + 1.734279   * n_4  + -6.904936  * n_5  + 
                                 -1.462809  * n_6  + -39.948057 * n_7  + -3.581457 * n_8  + 16.392302 * n_9  + 17.845584  * n_10 + 14.910130  * n_11 + 
                                 8.677643   * n_12 + -6.243399  * n_13 + -6.244540 * n_14 + -6.391586 * n_15 + -4.246883  * n_16 + -2.480363  * n_17 + 
                                 3.786697   * n_18 + 5.519079 ) 


    n_21 = ActivationFunctionTanh(-0.669782 * n_0  + -1.165891 * n_1  + 9.145082  * n_2  +-5.501762  * n_3  + 30.434156 * n_4  + -25.637483 * n_5  + 
                                 -42.602814 * n_6  + 8.023738  * n_7  + -11.263886* n_8  + -7.531423 * n_9  + -5.401233 * n_10 + -5.401149  * n_11 + 
                                 -8.191749  * n_12 + -8.075123 * n_13 + -4.535177 * n_14 +-1.778325  * n_15 + 0.379593  * n_16 + 0.536745   * n_17 + 
                                 -1.883129  * n_18 + 20.243839 ) 

    n_22 = ActivationFunctionTanh(14.025395* n_0  + -15.069160 * n_1  + -4.727757 * n_2  + 4.840682  * n_3  + 28.443405  * n_4  + 39.133836  * n_5  + 
                                 -14.046619* n_6  + 14.680681  * n_7  + -9.686183 * n_8  + -10.206002* n_9  + -5.098433  * n_10 +  -0.068886 * n_11 + 
                                 3.116187  * n_12 + -2.965843  * n_13 + -6.171666 * n_14 + -9.886335 * n_15 + -12.554741 * n_16 + -15.654204 * n_17 + 
                                 -22.456244* n_18 + -5.358606 ) 

    n_23 = ActivationFunctionTanh(9.374987  * n_0  + -4.446661  * n_1  + 0.275675  * n_2  + -16.928910* n_3  + 23.147793  * n_4  + 35.640051   * n_5  + 
                                 5.875151   * n_6  + -14.760578 * n_7  + 6.369082  * n_8  + 10.042361 * n_9  + 4.781169   * n_10 + -0.059385   * n_11 + 
                                 -2.612212  * n_12 + 7.714496   * n_13 + 6.386225  * n_14 + 1.191104  * n_15 + -7.073586  * n_16 + -20.069178  * n_17 + 
                                 -55.042651 * n_18 + -3.886819 )    

    n_24 = ActivationFunctionTanh(2.663541 * n_19 + -2.099758 * n_20 + -4.601314 * n_21 + 5.974406 * n_22 + -5.602451 * n_23 + -1.028527 )
    
    _output := ActivationFunctionTanh( -2.143367 * n_24 + 1.109338)


fun_wheatusd() => 

    float _output = na 
    
    n_19 = ActivationFunctionTanh(0.961611  * n_0  + 1.325036   * n_1  + 0.928311  * n_2  + -0.464820 * n_3  + -1.235527  * n_4  + -5.197677  * n_5  + 
                                 -5.220748  * n_6  + -0.435015  * n_7  + -1.117593 * n_8  + -1.509023 * n_9  + -1.772322  * n_10 + -2.025004  * n_11 + 
                                 -2.300922  * n_12 + -0.825069  * n_13 + 0.168465  * n_14 + 1.115068  * n_15 + 1.950541   * n_16 + 2.655906   * n_17 + 
                                 3.708604   * n_18 + -3.008412 ) 


    n_20 = ActivationFunctionTanh(12.096742 * n_0  + -6.449026  * n_1  + -6.299570 * n_2  + 1.381002  * n_3  + -4.345983  * n_4  + -6.705094  * n_5  + 
                                 -7.137769  * n_6  + -2.260595  * n_7  + -3.429868 * n_8  + -2.565760 * n_9  +  -2.963302 * n_10 + -3.905879  * n_11 + 
                                 -5.561209  * n_12 + -3.160744  * n_13 + 0.640422  * n_14 + 4.549076  * n_15 + 8.077078   * n_16 + 10.976684  * n_17 + 
                                 14.642064  * n_18 + -8.017961 ) 


    n_21 = ActivationFunctionTanh(8.577948  * n_0  + -1.472513 * n_1  + 7.565190  * n_2  +2.536047   * n_3  + -12.270036* n_4  + -25.714768 * n_5  + 
                                 -2.092846  * n_6  + -3.662564 * n_7  + -15.783113* n_8  + -11.486211* n_9  + -3.283087 * n_10 + 6.083519   * n_11 + 
                                 20.386080  * n_12 + 38.902794 * n_13 + 26.875476 * n_14 +11.270788  * n_15 + -4.984791 * n_16 + -20.677319 * n_17 + 
                                 -48.349377 * n_18 + 1.697108 ) 

    n_22 = ActivationFunctionTanh(11.084264* n_0  + -0.488823  * n_1  + -1.386432 * n_2  + -11.808428* n_3  + -9.226227  * n_4  + -14.624849 * n_5  + 
                                 2.172432  * n_6  + -1.437485  * n_7  + 1.119508  * n_8  + 7.836561  * n_9  + 9.457780   * n_10 +  8.858085  * n_11 + 
                                 5.742938  * n_12 + -5.981895  * n_13 + -5.830218 * n_14 + -4.567765 * n_15 + -2.853642  * n_16 + -1.012112  * n_17 + 
                                 2.360133  * n_18 + 5.156084 ) 

    n_23 = ActivationFunctionTanh(0.496510  * n_0  + 5.493848   * n_1  + 5.476157  * n_2  + -2.291120 * n_3  + 0.192331   * n_4  + -14.887287  * n_5  + 
                                 -1.692382  * n_6  + 0.458257   * n_7  + 1.641072  * n_8  + -0.725009 * n_9  + -2.673854  * n_10 + -4.734421   * n_11 + 
                                 -7.437286  * n_12 + -10.832898 * n_13 + -9.822508 * n_14 + -8.448790 * n_15 + -7.128080  * n_16 + -5.930711   * n_17 + 
                                 -4.040293  * n_18 + 11.816711 )
                               
    n_24 = ActivationFunctionTanh(8.424246  * n_0  + -0.056778  * n_1  + 9.916649  * n_2  + -4.257030 * n_3  + 4.216224   * n_4  + -4.170792  * n_5  + 
                                 -11.944372 * n_6  + -3.352448  * n_7  + -3.265660 * n_8  + -1.555127 * n_9  + -0.124169  * n_10 + 0.656079   * n_11 + 
                                 0.943745   * n_12 + 1.177454   * n_13 + 1.154465  * n_14 + 0.626170  * n_15 + -0.412038  * n_16 + -1.894514  * n_17 + 
                                 -5.787681  * n_18 + 3.056722 ) 

    n_25 = ActivationFunctionTanh(-5.124576 * n_0  + 1.755950   * n_1  + -9.554945 * n_2  + 22.993823 * n_3  + -7.542302  * n_4  + 14.267518  * n_5  + 
                                 -0.171087  * n_6  + 8.490161   * n_7  + 3.807292  * n_8  + -1.572685 * n_9  + -5.429362  * n_10 + -8.572822  * n_11 + 
                                 -11.913821 * n_12 + -8.372458  * n_13 + -3.563124 * n_14 + 1.407286  * n_15 + 6.011051   * n_16 + 10.059068  * n_17 + 
                                 16.312966  * n_18 + -18.429447 ) 

    n_26 = ActivationFunctionTanh(6.927516  * n_0  + -2.350770  * n_1  + -3.524347 * n_2  + 1.984772  * n_3  + -3.216395  * n_4  + -7.456674  * n_5  + 
                                 -7.108428  * n_6  + -3.020750  * n_7  + -3.252542 * n_8  + -2.470056 * n_9  + -3.046728  * n_10 + -4.246691  * n_11 + 
                                 -6.283600  * n_12 + -3.983715  * n_13 + 0.268726  * n_14 + 4.746396  * n_15 + 8.913871   * n_16 + 12.500131  * n_17 + 
                                 17.618427  * n_18 + -6.212254 ) 

    n_27 = ActivationFunctionTanh(-1.685433 * n_19  + -6.875939  * n_20  + 14.716548 * n_21  + -1.689214 * n_22  + -2.247420 * n_23  + -19.527750 * n_24  + 
                                 -10.994249 * n_25  + -2.140907  * n_26  + 0.939451 )

    _output := ActivationFunctionTanh(1.722896 * n_27 + -0.133147)


fun_xptusd() => 

    float _output = na 
    
    n_19 = ActivationFunctionTanh(2.499211  * n_0  + -1.992968  * n_1  + 5.064923  * n_2  + 7.152143  * n_3  + -6.009039  * n_4  + -2.005454  * n_5  + 
                                 0.671362   * n_6  + -0.139926  * n_7  + -9.782979 * n_8  + 12.633942 * n_9  + 23.377510  * n_10 + 26.837545  * n_11 + 
                                 20.813474  * n_12 + -45.150235 * n_13 + -47.324932* n_14 + -37.934193* n_15 + -19.034947 * n_16 + 7.218548   * n_17 + 
                                 74.433632  * n_18 + -5.208771 ) 


    n_20 = ActivationFunctionTanh(1.825644  * n_0  + -0.765291  * n_1  + -2.833486 * n_2  + -3.736169 * n_3  + 4.616473   * n_4  + -5.991300  * n_5  + 
                                 -4.973872  * n_6  + -5.968660  * n_7  + -9.696604 * n_8  + 2.022733  * n_9  + 6.412285   * n_10 + 6.989781   * n_11 + 
                                 2.711299   * n_12 + -25.746663 * n_13 + -23.175515* n_14 + -14.376600* n_15 + -0.542839  * n_16 + 17.122327  * n_17 + 
                                 59.906976  * n_18 + 3.755942 ) 


    n_21 = ActivationFunctionTanh(-9.786369 * n_0  + -0.920313 * n_1  + 12.607228 * n_2  + -1.667989 * n_3  + 1.264422  * n_4  + -10.764042 * n_5  + 
                                 -9.206400  * n_6  + -8.664685 * n_7  + -5.818571 * n_8  + -4.110942 * n_9  + -3.756418 * n_10 + -3.614852  * n_11 + 
                                 -3.447374  * n_12 + 0.271710  * n_13 + 2.192119  * n_14 + 4.202843  * n_15 + 6.233618  * n_16 + 8.241027   * n_17 + 
                                 12.093277  * n_18 + -1.929317 ) 

    n_22 = ActivationFunctionTanh(-16.019498* n_0  + -11.338098 * n_1  + -15.632155* n_2  + -12.840211* n_3  + -1.393815  * n_4  + 16.862192  * n_5  + 
                                 -1.172336  * n_6  + -8.349940  * n_7  + -5.206448 * n_8  + -1.081198 * n_9  + 1.753226   * n_10 +  4.194522  * n_11 + 
                                 6.866436   * n_12 + 8.345583   * n_13 + 7.371597  * n_14 + 6.414943  * n_15 + 5.564492   * n_16 + 4.848699   * n_17 + 
                                 3.813752   * n_18 + -20.202968 ) 

    n_23 = ActivationFunctionTanh(-5.208419 * n_0  + 0.891098   * n_1  + -12.895740* n_2  + 5.607103  * n_3  + -0.984433  * n_4  + -9.615051   * n_5  + 
                                 -6.501395  * n_6  + -1.654378  * n_7  + 1.959463  * n_8  + 5.525227  * n_9  + 5.488263   * n_10 + 4.019468    * n_11 + 
                                 0.339943   * n_12 + -11.006934 * n_13 + -8.980267 * n_14 + -4.929826 * n_15 + 0.550100   * n_16 + 6.996444    * n_17 + 
                                 21.497775  * n_18 + -0.508818 )
                               
    n_24 = ActivationFunctionTanh(1.575496  * n_0  + 0.482655   * n_1  + -3.612078 * n_2  + -1.737717 * n_3  + 0.249711   * n_4  + 1.681156   * n_5  + 
                                 3.451844   * n_6  + 3.311677   * n_7  + -0.298265 * n_8  + 0.135122  * n_9  + -0.108220  * n_10 + -1.392295  * n_11 + 
                                 -4.923212  * n_12 + -19.032812 * n_13 + -16.266702* n_14 + -10.019878* n_15 + -1.029156  * n_16 + 9.991241   * n_17 + 
                                 35.797940  * n_18 + 3.948601 ) 

    n_25 = ActivationFunctionTanh(4.745160  * n_0  + 0.534713   * n_1  + -2.208321 * n_2  + 5.164371  * n_3  + 3.205629   * n_4  + 8.604784   * n_5  + 
                                 -3.379243  * n_6  + -7.623609  * n_7  + -20.162212* n_8  + -8.070348 * n_9  + -1.645594  * n_10 + 0.670609   * n_11 + 
                                 -2.043487  * n_12 + -27.670934 * n_13 + -22.914014* n_14 + -11.169587* n_15 + 6.228360   * n_16 + 27.939171  * n_17 + 
                                 79.802087  * n_18 + -9.859979 ) 

    n_26 = ActivationFunctionTanh(-5.692616 * n_0  +  3.660333  * n_1  + -3.264224 * n_2  + -5.215868 * n_3  + 3.036921   * n_4  + 17.256778  * n_5  + 
                                 5.392433   * n_6  + 1.583641   * n_7  + -1.596475 * n_8  + 7.201721  * n_9  + 11.199079  * n_10 + 12.228843  * n_11 + 
                                 9.385658   * n_12 + -16.629096 * n_13 + -18.020646* n_14 + -15.597108* n_15 + -10.162446 * n_16 + -2.474456  * n_17 + 
                                 17.246994  * n_18 + -6.081228 ) 

    n_27 = ActivationFunctionTanh(-15.604773* n_19  + -4.030946  * n_20  + -13.983219 * n_21  + -10.895688 * n_22  + -7.182009 * n_23  + -2.940039 * n_24  + 
                                 -12.779924 * n_25  + -3.522671  * n_26  + 19.095286 )

    _output := ActivationFunctionTanh(1.870385 * n_27 + -1.217521)


fun_xu030() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-7.027830 * n_0  + -35.303853 * n_1  + 1.435069  * n_2  + 1.886740  * n_3  + 3.968596   * n_4  + 31.296409  * n_5  + 
                                 14.927112  * n_6  + 24.626536  * n_7  + 8.432307  * n_8  + -3.434388 * n_9  + -6.218215  * n_10 + -6.663466  * n_11 + 
                                 -5.077201  * n_12 + 2.158286   * n_13 + 0.139262  * n_14 + -3.307978 * n_15 + -7.520514  * n_16 + -12.088622 * n_17 + 
                                 -21.452137 * n_18 + -9.622644 ) 


    n_20 = ActivationFunctionTanh(30.699400 * n_0  + 13.713296  * n_1  + -13.344576* n_2  + -2.149776 * n_3  + 11.437442  * n_4  + 28.725346  * n_5  + 
                                 10.169822  * n_6  + 1.160633   * n_7  + -1.112650 * n_8  + -7.538278 * n_9  + -11.208920 * n_10 + -13.719878 * n_11 + 
                                 -15.466813 * n_12 + -11.290466 * n_13 + -9.958459 * n_14 + -9.554585 * n_15 + -9.831360  * n_16 + -10.831591 * n_17 + 
                                 -14.549314 * n_18 + 2.232031 ) 


    n_21 = ActivationFunctionTanh(-4.818656 * n_0  + -4.685779 * n_1  + 3.991065   * n_2  + -9.779351 * n_3  + 14.918747  * n_4  + 20.952613  * n_5  + 
                                 -0.863700  * n_6  + 21.205606 * n_7  + 8.142248   * n_8  + -5.074615 * n_9  + -11.358128 * n_10 + -16.088541 * n_11 + 
                                 -20.818409 * n_12 + -20.239443* n_13 + -15.078991 * n_14 + -9.210919 * n_15 + -2.948456  * n_16 + 3.168177   * n_17 + 
                                 14.415195  * n_18 + 5.060051 ) 

    n_22 = ActivationFunctionTanh(-4.298800* n_0  + 3.450164   * n_1  + 8.328239  * n_2  + -9.669749 * n_3  + 12.870080  * n_4  + 6.100277   * n_5  + 
                                 4.163908  * n_6  + -18.282372 * n_7  + -17.449549* n_8  + 0.540602  * n_9  + 9.917472   * n_10 +  15.642584 * n_11 + 
                                 18.915881 * n_12 + 1.258720   * n_13 + -6.233797 * n_14 + -12.836219* n_15 + -18.141501 * n_16 + -22.379503 * n_17 + 
                                 -28.505182* n_18 + 13.213492 ) 

    n_23 = ActivationFunctionTanh(0.753714  * n_0  + 1.470527   * n_1  + 12.151546 * n_2  + 23.807127 * n_3  + 8.330427   * n_4  + 17.449300   * n_5  + 
                                 -2.284578  * n_6  + 7.250771   * n_7  + -2.979603 * n_8  + -7.945024 * n_9  + -6.029440  * n_10 + -3.025098   * n_11 + 
                                 0.736886   * n_12 + -3.193565  * n_13 + -7.013405 * n_14 + -9.421267 * n_15 + -9.692001  * n_16 + -7.757119   * n_17 + 
                                 2.720944   * n_18 + -22.926558 )
                               
    n_24 = ActivationFunctionTanh(67.854654 * n_0  + -62.937232 * n_1  + -5.761022 * n_2  + 61.589025 * n_3  + 18.970191  * n_4  + -27.439731 * n_5  + 
                                 -43.652315 * n_6  + -9.940305  * n_7  + -18.718208* n_8  + -26.812133* n_9  + -31.181867 * n_10 + -35.073850 * n_11 + 
                                 -39.324938 * n_12 + -22.873144 * n_13 + -10.463898* n_14 + 0.772911  * n_15 + 9.514499   * n_16 + 15.121783  * n_17 + 
                                 17.003025  * n_18 + -5.948295 ) 

    n_25 = ActivationFunctionTanh(0.541198  * n_0  + 0.350127   * n_1  + 7.032998  * n_2  + 6.358878  * n_3  + -0.699605  * n_4  + -0.901426  * n_5  + 
                                 1.597412   * n_6  + -23.049043 * n_7  + 40.442686 * n_8  + 34.470641 * n_9  + 1.750514   * n_10 + -32.694719 * n_11 + 
                                 -68.027788 * n_12 + 13.024160  * n_13 + 40.808958 * n_14 + 46.760480 * n_15 + 31.725985  * n_16 + 0.837709   * n_17 + 
                                 -92.474022 * n_18 + -5.423713 ) 

    n_26 = ActivationFunctionTanh(18.939339 * n_0  + 10.979668  * n_1  + 59.465566 * n_2  + 4.002167  * n_3  + -3.306684  * n_4  + 6.516248   * n_5  + 
                                 -5.738386  * n_6  + 23.973489  * n_7  + -32.694233* n_8  + -36.353320* n_9  + -21.331454 * n_10 + -4.359682  * n_11 + 
                                 18.625206  * n_12 + 50.411861  * n_13 + 35.217741 * n_14 + 15.788225 * n_15 + -4.441577  * n_16 + -22.636201 * n_17 + 
                                 -49.113245 * n_18 + -31.115172 ) 

    n_27 = ActivationFunctionTanh(14.683004 * n_0  + -35.613561 * n_1  + -2.556484 * n_2  + 6.347628  * n_3  + 26.458306  * n_4  + 17.690415  * n_5  + 
                                 -23.133433 * n_6  + -12.876226 * n_7  + -10.134231* n_8  + -1.743370 * n_9  + 2.491144   * n_10 + 5.665485   * n_11 + 
                                 8.874271   * n_12 + 7.984719   * n_13 + 3.709288  * n_14 + -1.062817 * n_15 + -5.873249  * n_16 + -10.415648 * n_17 + 
                                 -18.251753 * n_18 + -15.549336 ) 

    n_28 = ActivationFunctionTanh(-13.833890* n_0  + -10.049905 * n_1  + -0.051472 * n_2  + 1.471027  * n_3  + 32.651515  * n_4  + 18.084454  * n_5  + 
                                 -5.793320  * n_6  + -32.215338 * n_7  + -12.163734* n_8  + 2.312155  * n_9  + 3.966685   * n_10 + 2.262853   * n_11 + 
                                 -1.614357  * n_12 + 1.386617   * n_13 + 2.510501  * n_14 + -0.000098 * n_15 + -6.118310  * n_16 + -15.281863 * n_17 + 
                                 -40.544125 * n_18 + 21.861456 )
    
    n_29 = ActivationFunctionTanh(23.490344 * n_0  + -25.726950 * n_1  + -5.084790 * n_2  + 16.052566 * n_3  + 7.389499   * n_4  + -9.698103  * n_5  + 
                                 -13.484620 * n_6  + 7.892849   * n_7  + -15.823200* n_8  + -22.634481* n_9  + -18.327915 * n_10 + -11.245212 * n_11 + 
                                 -0.062595  * n_12 + 10.659197  * n_13 + 4.510902  * n_14 + -1.024377 * n_15 + -4.424103  * n_16 + -5.031381  * n_17 + 
                                 2.421903   * n_18 + 4.950309 )
    
    _output := ActivationFunctionTanh(5.016163 * n_19  + 2.295846  * n_20  + 6.151013  * n_21  + 2.725079 * n_22  + -7.176722 * n_23  + 8.617770 * n_24  + 
                                     1.168080  * n_25  + 5.566165  * n_26  + 13.011676 * n_27  + 0.898526 * n_28  + -11.233352* n_29 + -0.571073 )                             
    


fun_vix() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-11.294785* n_0  + -63.132604 * n_1  + -7.127822 * n_2  + -2.165681 * n_3  + -7.533645  * n_4  + 24.378364  * n_5  + 
                                 9.064153   * n_6  + 20.371470  * n_7  + 19.757394 * n_8  + 1.973653  * n_9  + -6.352479  * n_10 + -11.518026 * n_11 + 
                                 -14.986311 * n_12 + -8.347546  * n_13 + -6.800167 * n_14 + -5.942533 * n_15 + -5.827342  * n_16 + -6.804738  * n_17 + 
                                 -7.987609  * n_18 + -3.083346 ) 


    n_20 = ActivationFunctionTanh(25.251791 * n_0  + -0.851427  * n_1  + -0.803084 * n_2  + -12.563452* n_3  + -1.405979  * n_4  + -29.463906 * n_5  + 
                                 14.421410  * n_6  + -26.555849 * n_7  + -31.460425* n_8  + -9.263747 * n_9  +  8.001498  * n_10 + 21.428059  * n_11 + 
                                 34.693254  * n_12 + 34.452005  * n_13 + 25.355976 * n_14 + 13.963160 * n_15 + 2.345632   * n_16 + -11.758642 * n_17 + 
                                 -42.287575 * n_18 + -6.552560 ) 


    n_21 = ActivationFunctionTanh(-0.319847 * n_0  + -2.434300 * n_1  + -2.308474 * n_2  + 0.394861  * n_3  + -7.061953 * n_4  + 5.563237   * n_5  + 
                                 -9.008975  * n_6  + 17.001630 * n_7  + -39.301980* n_8  + -16.631199* n_9  + 10.648020 * n_10 + 31.542708  * n_11 + 
                                 45.385885  * n_12 + -25.838556* n_13 + -41.451644* n_14 + -41.709903* n_15 + -26.344864* n_16 + 1.566232   * n_17 + 
                                 88.033609  * n_18 + 1.679514 ) 

    n_22 = ActivationFunctionTanh(12.237823* n_0  + 2.087821   * n_1  + 16.986127 * n_2  + -18.696409* n_3  + -24.510576 * n_4  + 12.551844  * n_5  + 
                                 -6.335668 * n_6  + -30.591662 * n_7  + -10.656355* n_8  + 13.068287 * n_9  + 17.039053  * n_10 +  18.243180 * n_11 + 
                                 15.804450 * n_12 + -1.025227  * n_13 + -4.309503 * n_14 + -6.708005 * n_15 + -6.461362  * n_16 + -4.905761  * n_17 + 
                                 2.556830  * n_18 + -8.780514 ) 

    n_23 = ActivationFunctionTanh(-16.290717* n_0  + -33.510395 * n_1  + -0.513123 * n_2  + -38.667941* n_3  + -0.740356  * n_4  + -33.551265  * n_5  + 
                                 21.415246  * n_6  + -27.330741 * n_7  + 17.692839 * n_8  + 12.727064 * n_9  + 5.110967   * n_10 + 0.044578    * n_11 + 
                                 -0.912907  * n_12 + 20.666220  * n_13 + 20.290604 * n_14 + 15.412158 * n_15 + 7.174640   * n_16 + -4.873329   * n_17 + 
                                 -34.089973 * n_18 + 4.384436 )
    
    _output := ActivationFunctionTanh(22.027859 * n_19 + 3.650697 * n_20 + -2.965895 * n_21 + -7.445253 * n_22 + 4.231037 * n_23 + -0.348339 )


fun_eminidow() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-2.261342 * n_0  + -2.393113  * n_1  + 1.074431  * n_2  + 2.186015  * n_3  + -10.016352 * n_4  + 6.229209   * n_5  + 
                                 -10.406983 * n_6  + 11.616034  * n_7  + 4.776894  * n_8  + -12.253270* n_9  + -14.357007 * n_10 + -11.037332 * n_11 + 
                                 0.065279   * n_12 + 42.225112  * n_13 + 37.240044 * n_14 + 24.405062 * n_15 + 5.763785   * n_16 + -16.908374 * n_17 + 
                                 -68.937877 * n_18 + 6.455440 ) 


    n_20 = ActivationFunctionTanh(3.870284  * n_0  + -18.830562 * n_1  + -5.038357 * n_2  + -6.914511 * n_3  + -10.527319 * n_4  + -16.916514 * n_5  + 
                                 1.393027   * n_6  + -15.991093 * n_7  + 0.789511  * n_8  + 7.490466  * n_9  +  8.083887  * n_10 + 6.589225   * n_11 + 
                                 2.482649   * n_12 + -6.299217  * n_13 + -4.461190 * n_14 + -1.875072 * n_15 + 0.925596   * n_16 + 3.656416   * n_17 + 
                                 8.423483   * n_18 + 3.594385 ) 

    _output := ActivationFunctionTanh(1.743811 * n_19 + 14.434013 * n_20 + -0.860878)


fun_eminisp() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-9.644142 * n_0  + 1.737800   * n_1  + -2.347417 * n_2  + 8.254455  * n_3  + 22.193314  * n_4  + 15.557042  * n_5  + 
                                 -2.026579  * n_6  + 20.198252  * n_7  + -2.838014 * n_8  + -10.628401* n_9  + -10.794516 * n_10 + -8.859527  * n_11 + 
                                 -4.674202  * n_12 + 4.723117   * n_13 + 3.476955  * n_14 + 1.640141  * n_15 + -0.285519  * n_16 + -2.045826  * n_17 + 
                                 -4.627938  * n_18 + -1.921614 ) 


    n_20 = ActivationFunctionTanh(6.937739  * n_0  + 6.417953   * n_1  + 4.010144  * n_2  + -3.493635 * n_3  + -2.897890  * n_4  + 6.249484   * n_5  + 
                                 7.807317   * n_6  + -10.746341 * n_7  + -16.841312* n_8  + 10.604229 * n_9  +  19.883030 * n_10 + 20.876378  * n_11 + 
                                 12.659118  * n_12 + -45.656977 * n_13 + -44.742975* n_14 + -32.943852* n_15 + -12.270038 * n_16 + 15.238208  * n_17 + 
                                 82.298871  * n_18 + -7.334016 ) 

    n_21 = ActivationFunctionTanh(-10.001850 * n_19 + -4.695181 * n_20 + 8.491263)
    
    _output := ActivationFunctionTanh(4.021098 * n_21 + -0.912684)


fun_gazpromf() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(-0.025426 * n_0  + -0.014127  * n_1  + -0.011430 * n_2  + -0.020288 * n_3  + -0.020913  * n_4  + 0.003858   * n_5  + 
                                 -0.003545  * n_6  + -0.012952  * n_7  + -0.008566 * n_8  + -0.001573 * n_9  + 0.002608   * n_10 + 0.004733   * n_11 + 
                                 0.007037   * n_12 + 0.012231   * n_13 + 0.012482  * n_14 + 0.012604  * n_15 + 0.012731   * n_16 + 0.012828   * n_17 + 
                                 0.012384   * n_18 + -0.505229 ) 


    n_20 = ActivationFunctionTanh(-0.025085 * n_0  + -0.013937  * n_1  + -0.011276 * n_2  + -0.020016 * n_3  + -0.020632  * n_4  + 0.003807   * n_5  + 
                                 -0.003497  * n_6  + -0.012779  * n_7  + -0.008451 * n_8  + -0.001552 * n_9  +  0.002573  * n_10 + 0.004669   * n_11 + 
                                 0.006943   * n_12 + 0.012067   * n_13 + 0.012314  * n_14 + 0.012435  * n_15 + 0.012560   * n_16 + 0.012656   * n_17 + 
                                 0.012218   * n_18 + -0.520712 ) 

    _output := ActivationFunctionTanh(-0.134265 * n_19 + -0.132985 * n_20 + -0.717485)
    

fun_sse() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(21.575390 * n_0  + -33.728637 * n_1  +  5.275654  * n_2  + -1.226127 * n_3  + -6.924997  * n_4  + 9.304761   * n_5  + 
                                 9.456291   * n_6  + 5.896116   * n_7  + 5.263042   * n_8  + 3.925821  * n_9  + 2.296578   * n_10 + 0.859156   * n_11 + 
                                 -1.075822  * n_12 + -9.460466  * n_13 + -10.503466 * n_14 + -10.141021* n_15 + -8.953641  * n_16 + -7.837057  * n_17 + 
                                 -3.514885  * n_18 + 5.390274  ) 


    n_20 = ActivationFunctionTanh(12.451315 * n_0  + 0.882831   * n_1  + -11.909000* n_2  + 2.247953  * n_3  + 13.490128  * n_4  + 17.266256  * n_5  + 
                                 3.153224   * n_6  + 0.225682   * n_7  + -10.564285* n_8  + -15.991940* n_9  + -14.328469 * n_10 + -12.088968 * n_11 + 
                                 -7.994658  * n_12 + 7.624154   * n_13 + 8.487648  * n_14 + 6.615231  * n_15 + 5.266622   * n_16 + 2.336624   * n_17 + 
                                 -2.939210  * n_18 + -10.779584) 


    n_21 = ActivationFunctionTanh(-20.087845* n_0  + -0.718209 * n_1  + -1.685095  * n_2  + 6.076268  * n_3  + 9.389677   * n_4  + 3.382018   * n_5  + 
                                 -0.113237  * n_6  + 11.071463 * n_7  + 27.752815  * n_8  + 20.237875 * n_9  + 12.220387  * n_10 + 6.490254   * n_11 + 
                                 1.079413   * n_12 + -2.236487 * n_13 + -3.883993  * n_14 + -6.800852 * n_15 + -10.030043 * n_16 + -14.638398 * n_17 + 
                                 -24.565859 * n_18 + 1.086839 ) 

    n_22 = ActivationFunctionTanh(34.286331   * n_0  + 3.061524   * n_1  + 8.455889  * n_2  + 1.880556  * n_3  + -12.549264 * n_4  + -6.183751   * n_5  + 
                                 12.106279    * n_6  + 0.656993   * n_7  + -17.939969* n_8  + -22.447216* n_9  + -19.960521 * n_10 +  -14.666369 * n_11 + 
                                 -6.481830    * n_12 + 19.365887  * n_13 + 17.513911 * n_14 + 11.791220 * n_15 + 5.015822   * n_16 + -3.335209   * n_17 + 
                                 -21.652974   * n_18 + 4.430642 ) 

    n_23 = ActivationFunctionTanh(-1.283398 * n_0  + -10.643421 * n_1  + 6.545802   * n_2  + -0.527160 * n_3  + -10.927518 * n_4  + -7.182024   * n_5  + 
                                 5.205120   * n_6  + -2.944323  * n_7  + 0.171480   * n_8  + 0.625331  * n_9  + 1.145174   * n_10 + 1.018951    * n_11 + 
                                 1.895270   * n_12 + 15.795418  * n_13 + 15.691508  * n_14 + 11.466627 * n_15 + 3.944671   * n_16 + -8.384377   * n_17 + 
                                 -41.606042 * n_18 + 4.510940 )
    
    n_24 = ActivationFunctionTanh(17.337084* n_19  + -13.964603 * n_20  + -14.623282 * n_21 + -5.271734 * n_22  + -13.554255 * n_23  + -0.650667 )
    
    _output := ActivationFunctionTanh(-3.389195 * n_24  + 0.011415 )


fun_xrpusd() =>

    float _output = na 
    
    n_19 = ActivationFunctionTanh(0.000327  * n_0  + 0.000063   * n_1  + 0.000502  * n_2  + 0.000348  * n_3  + 0.000378   * n_4  + 0.000334   * n_5  + 
                                 0.000361   * n_6  + 0.000394   * n_7  + 0.000388  * n_8  + 0.000353  * n_9  + 0.000341   * n_10 + 0.000332   * n_11 + 
                                 0.000325   * n_12 + 0.000306   * n_13 + 0.000301  * n_14 + 0.000296  * n_15 + 0.000293   * n_16 + 0.000289   * n_17 + 
                                 0.000284   * n_18 + -0.466893 ) 


    n_20 = ActivationFunctionTanh(0.000358  * n_0  + 0.000069   * n_1  + 0.000550  * n_2  + 0.000381  * n_3  + 0.000414   * n_4  + 0.000366   * n_5  + 
                                 0.000396   * n_6  + 0.000431   * n_7  + 0.000425  * n_8  + 0.000387  * n_9  + 0.000373   * n_10 + 0.000364   * n_11 + 
                                 0.000356   * n_12 + 0.000335   * n_13 + 0.000329  * n_14 + 0.000325  * n_15 + 0.000320   * n_16 + 0.000317   * n_17 + 
                                 0.000311   * n_18 + -0.354177 ) 


    n_21 = ActivationFunctionTanh(-0.052838 * n_19  + -0.056542  * n_20  + 0.172829 ) 

    _output := ActivationFunctionTanh(-0.077827 * n_21  + 0.077792 )


    
//--------------------------------------------------------------------------------------------------------------------------------------------------

// SWITCHABLE INSTRUMENTS 

float _output = na

if (pref == "WTI")

    _output := fun_wti()

if (pref == "BRENT")

    _output := fun_lco()

if (pref == "GOLD")

    _output := fun_gold()

if (pref == "SP500")

    _output := fun_us500()

if (pref == "EURUSD")

    _output := fun_eurusd()

if (pref == "ETHUSD")

    _output := fun_eth()

if (pref == "BTCUSD")

    _output := fun_btc()

if (pref == "GBPUSD")

    _output := fun_gbpusd()

if (pref == "USDJPY")

    _output := fun_usdjpy()

if (pref == "USDCHF")

    _output := fun_usdchf()

if (pref == "USDCAD")

    _output := fun_usdcad()

if (pref == "AUDUSD")

    _output := fun_audusd()

if (pref == "SOYBNUSD")

    _output := fun_soybnusd()

if (pref == "CORNUSD")

    _output := fun_cornusd()

if (pref == "NATGASUSD")

    _output := fun_natgasusd()

if (pref == "SUGARUSD")

    _output := fun_sugarusd()

if (pref == "WHEATUSD")

    _output := fun_wheatusd()

if (pref == "XPTUSD")

    _output := fun_xptusd()

if (pref == "XU030")

    _output := fun_xu030()

if (pref == "VIX")

    _output := fun_vix()

if (pref == "YM")

    _output := fun_eminidow()
    
if (pref == "ES")

    _output := fun_eminisp()

if (pref == "GAZP")

    _output := fun_gazpromf()

if (pref == "SSE")

    _output := fun_sse()

if (pref == "XRPUSD")

    _output := fun_xrpusd()


// ------------------------------------------------------------------------------------------------------------------------------------------

_chg_src = tangentdiff(src) * 100

_seed = (_output - _chg_src) 


// MACD : SEED 


fastLength   = 12
slowlength   = 26
signalLength = 9


macd   = ema(_seed, fastLength) - ema(_seed, slowlength)
signal = ema(macd, signalLength)
	   

hist = macd - signal

// Conditions : 

positive_condition = hist < 0 
negative_condition = hist > 0


//Plot data

col_hist() => positive_condition ? color.new(#F5FFFA,0) : negative_condition ? color.new(#FF355E,0) : color.new(color.yellow,0)
col_histo = col_hist()

//Plot data

hline(0, color=#FFB300, linewidth = 2)
plot(hist, color=(positive_condition ? #00A86B : #D40000), style=plot.style_histogram,linewidth= 5 , title="Area", transp=30)
plot(hist, color=col_histo,style =plot.style_histogram, title="Forecast", linewidth=1)